name: CI/CD to AWS with ECR and ECS

on:
  push:
    branches: [ qa ]
  pull_request:
    branches: [ qa ]

env:
  AWS_REGION: us-east-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: bk-service-qa-ecr           # set this to your Amazon ECR repository name
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: bk-service-py-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

jobs:

  build:
      runs-on: ubuntu-latest
      steps:

      - uses: actions/checkout@v2

      # - name: Build the Docker images
      #   run: docker-compose -f local.yml build

      # - name: Run Migrate
      #   run: docker-compose -f local.yml run --rm django python manage.py migrate 

      # - name: Run test
      #   run: docker-compose -f local.yml run --rm django pytest

      # - name: Create .env folder
      #   run: |
      #     chmod 777 create-envs.sh
      #     ./create-envs.sh QA

      # - name: Build production image
      #   run : docker-compose -f production.yml build

      # - name: Run Migrate
      #   run : docker-compose -f production.yml run --rm django python manage.py migrate

  # deploy:
  #   name: Deploy
  #   runs-on: ubuntu-latest
  #   environment: production

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ env.AWS_REGION }}

  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v1

  #   - name: Build, tag, and push image to Amazon ECR
  #     id: build-image
  #     env:
  #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #       IMAGE_TAG: ${{ github.sha }}
  #     run: |
  #       # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.

        # Create .env folder
        # chmod 777 create-envs.sh
        # ./create-envs.sh

        # Build production image


        # docker-compose -f production.yml build django

        # docker-compose -f production.yml build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # docker push -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # Run Migrate
        # docker-compose -f production.yml run --rm django python manage.py migrate 
        # Push


        # docker-compose -f production.yml push django

        # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true

